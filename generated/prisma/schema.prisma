generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum FoodType {
  NON_VEGETARIAN
  VEGETARIAN
  VEGAN
}

model User {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  email    String  @unique
  name     String?
  phone    String  @unique
  password String
  // favoriteFoods Food[]
}

model Food {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  description       String
  price             Float
  min_delivery_time Int
  max_delivery_time Int
  free_delivery     Boolean     @default(false)
  veg               Boolean
  variants          Variant[]
  cuisine           Cuisine[]
  discount          Float
  sell_count        Int
  image             String
  restaurant        Restaurant? @relation(fields: [restaurantId], references: [restaurantId])
  restaurantId      String?     @db.ObjectId
  category          Category?   @relation(fields: [categoryId], references: [id])
  categoryId        String?     @db.ObjectId
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Variant {
  variantId String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      String
  min       String
  max       String
  required  Boolean
  food      Food?   @relation(fields: [foodId], references: [id])
  foodId    String? @db.ObjectId
  values    Value[]
}

model Value {
  valueId         String   @id @default(auto()) @map("_id") @db.ObjectId
  label           String
  optionPrice     Int
  stock           Int
  stock_unlimited Boolean
  variant         Variant? @relation(fields: [variantId], references: [variantId])
  variantId       String?  @db.ObjectId
}

model Category {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  image          String
  products_count Int      @default(0)
  type_count     Int      @default(0)
  status         Boolean  @default(true)
  order_count    Int      @default(0)
  type           Type[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  foods          Food[]
}

model Type {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  status     Boolean   @default(true)
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Cuisine {
  cuisineId    String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  image        String
  status       Boolean     @default(true)
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [restaurantId])
  restaurantId String?     @db.ObjectId
  food         Food?       @relation(fields: [foodId], references: [id])
  foodId       String?     @db.ObjectId
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model schedules {
  scheduleId    String      @id @default(auto()) @map("_id") @db.ObjectId
  day           Int
  opening_time  DateTime?
  closeing_time DateTime?
  restaurant    Restaurant? @relation(fields: [restaurantId], references: [restaurantId])
  restaurantId  String?     @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Restaurant {
  restaurantId   String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  phone          String
  email          String
  logo           String
  image          String
  longitude      String
  latitude       String
  address        String
  footer_text    String
  minimum_order  Float
  comission      Float
  schedule_order Boolean
  cover_photo    String
  schedules      schedules[]
  foods          Food[]
  delivery       Boolean
  free_delivery  Boolean
  active         Boolean
  off_day        String
  delivery_time  String
  cuisine        Cuisine[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}
